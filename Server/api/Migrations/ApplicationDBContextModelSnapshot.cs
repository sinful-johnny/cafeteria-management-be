// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Identity;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CafeteriaDB.ADMIN", b =>
                {
                    b.Property<string>("ID_ADMIN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CREATED_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("EMAIL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PASSWORDHASH")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SALT")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID_ADMIN");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("CafeteriaDB.CAFETERIA_TABLE", b =>
                {
                    b.Property<string>("ID_TABLE")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CANVA_ADMINID_ADMIN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CANVA_ADMINID_CANVA")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CREATED_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("ID_ADMIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ID_CANVA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ID_SHAPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SHAPE_TYPEID_SHAPE")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TABLE_STATUS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<double?>("X_COORDINATE")
                        .HasColumnType("float");

                    b.Property<double?>("Y_COORDINATE")
                        .HasColumnType("float");

                    b.HasKey("ID_TABLE");

                    b.HasIndex("SHAPE_TYPEID_SHAPE");

                    b.HasIndex("CANVA_ADMINID_CANVA", "CANVA_ADMINID_ADMIN");

                    b.ToTable("CafeteriaTable");
                });

            modelBuilder.Entity("CafeteriaDB.CANVA", b =>
                {
                    b.Property<string>("ID_CANVA")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CREATED_AT")
                        .HasColumnType("datetime2");

                    b.Property<double?>("HEIGHT")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<double?>("WIDTH")
                        .HasColumnType("float");

                    b.HasKey("ID_CANVA");

                    b.ToTable("Canva");
                });

            modelBuilder.Entity("CafeteriaDB.CANVA_ADMIN", b =>
                {
                    b.Property<string>("ID_CANVA")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ID_ADMIN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CREATED_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("LOGIN_STATUS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID_CANVA", "ID_ADMIN");

                    b.HasIndex("ID_ADMIN");

                    b.ToTable("CANVA_ADMIN");
                });

            modelBuilder.Entity("CafeteriaDB.FOOD_TABLE", b =>
                {
                    b.Property<string>("ID_FOOD")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ID_TABLE")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AMOUNT_IN_TABLE")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CREATED_AT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID_FOOD", "ID_TABLE");

                    b.HasIndex("ID_TABLE");

                    b.ToTable("FOOD_TABLE");
                });

            modelBuilder.Entity("CafeteriaDB.FOOD_TYPE", b =>
                {
                    b.Property<string>("ID_FOOD")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AMOUNT_LEFT")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CREATED_AT")
                        .HasColumnType("datetime2");

                    b.Property<string>("FOOD_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FOOD_TYPENAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FOOD_TYPE_STATUS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IMAGE_LINK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.HasKey("ID_FOOD");

                    b.ToTable("FoodType");
                });

            modelBuilder.Entity("CafeteriaDB.SHAPE_TYPE", b =>
                {
                    b.Property<string>("ID_SHAPE")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CREATED_AT")
                        .HasColumnType("datetime2");

                    b.Property<double?>("HEIGHT")
                        .HasColumnType("float");

                    b.Property<double?>("RADIUS")
                        .HasColumnType("float");

                    b.Property<string>("SHAPE_TYPENAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UPDATE_AT")
                        .HasColumnType("datetime2");

                    b.Property<double?>("WIDTH")
                        .HasColumnType("float");

                    b.HasKey("ID_SHAPE");

                    b.ToTable("ShapeType");
                });

            modelBuilder.Entity("CafeteriaDB.V_ADMIN_FOODsOnTABLE", b =>
                {
                    b.Property<string>("ID_FOOD")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ID_TABLE")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AMOUNT_IN_TABLE")
                        .HasColumnType("int");

                    b.Property<int?>("AMOUNT_LEFT")
                        .HasColumnType("int");

                    b.Property<string>("FOOD_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FOOD_TYPE_STATUS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IMAGE_LINK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID_FOOD", "ID_TABLE");

                    b.ToTable("V_FoodsOnTable");
                });

            modelBuilder.Entity("CafeteriaDB.V_ADMIN_TABLEInCANVA", b =>
                {
                    b.Property<string>("ID_TABLE")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("HEIGHT")
                        .HasColumnType("float");

                    b.Property<string>("ID_CANVA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ID_SHAPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("RADIUS")
                        .HasColumnType("float");

                    b.Property<string>("TABLE_STATUS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("WIDTH")
                        .HasColumnType("float");

                    b.Property<double?>("X_COORDINATE")
                        .HasColumnType("float");

                    b.Property<double?>("Y_COORDINATE")
                        .HasColumnType("float");

                    b.HasKey("ID_TABLE");

                    b.ToTable("V_TableInCanva");
                });

            modelBuilder.Entity("IdentityCafeteriaModel.V_Menu", b =>
                {
                    b.Property<int>("menuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("menuID"));

                    b.Property<string>("menuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("menuParent")
                        .HasColumnType("int");

                    b.HasKey("menuID");

                    b.ToTable("VMenus");
                });

            modelBuilder.Entity("IdentityCafeteriaModel.V_Permission_RoleMenu", b =>
                {
                    b.Property<int>("rolemenuID")
                        .HasColumnType("int");

                    b.Property<int?>("permissionID")
                        .HasColumnType("int");

                    b.Property<string>("permissionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("rolemenuID", "permissionID");

                    b.ToTable("VPermission_Roles");
                });

            modelBuilder.Entity("IdentityCafeteriaModel.V_Role_Menu", b =>
                {
                    b.Property<int>("menuID")
                        .HasColumnType("int");

                    b.Property<int>("rolemenuID")
                        .HasColumnType("int");

                    b.Property<int?>("permissionID")
                        .HasColumnType("int");

                    b.Property<string>("roleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("menuID", "rolemenuID", "permissionID");

                    b.ToTable("VRole_Menus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Dtos.USER.UserRole", b =>
                {
                    b.Property<string>("ROLE_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("userRoles");
                });

            modelBuilder.Entity("api.Identity.ApplicationAPI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("API")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetAPI", (string)null);
                });

            modelBuilder.Entity("api.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("api.Identity.ApplicationRoleMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("MenuId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleMenu", (string)null);
                });

            modelBuilder.Entity("api.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("api.Identity.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("AspNetMenu", (string)null);
                });

            modelBuilder.Entity("api.Identity.MenuPermission", b =>
                {
                    b.Property<int>("RoleMenuId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("RoleMenuId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("MenuPermission", (string)null);
                });

            modelBuilder.Entity("api.Identity.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("CafeteriaDB.CAFETERIA_TABLE", b =>
                {
                    b.HasOne("CafeteriaDB.SHAPE_TYPE", "SHAPE_TYPE")
                        .WithMany("CAFETERIA_TABLE")
                        .HasForeignKey("SHAPE_TYPEID_SHAPE");

                    b.HasOne("CafeteriaDB.CANVA_ADMIN", "CANVA_ADMIN")
                        .WithMany("CAFETERIA_TABLE")
                        .HasForeignKey("CANVA_ADMINID_CANVA", "CANVA_ADMINID_ADMIN");

                    b.Navigation("CANVA_ADMIN");

                    b.Navigation("SHAPE_TYPE");
                });

            modelBuilder.Entity("CafeteriaDB.CANVA_ADMIN", b =>
                {
                    b.HasOne("CafeteriaDB.ADMIN", "ADMIN")
                        .WithMany("CANVA_ADMIN")
                        .HasForeignKey("ID_ADMIN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeteriaDB.CANVA", "CANVA")
                        .WithMany("CANVA_ADMIN")
                        .HasForeignKey("ID_CANVA")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ADMIN");

                    b.Navigation("CANVA");
                });

            modelBuilder.Entity("CafeteriaDB.FOOD_TABLE", b =>
                {
                    b.HasOne("CafeteriaDB.FOOD_TYPE", "FOOD_TYPE")
                        .WithMany("FOOD_TABLE")
                        .HasForeignKey("ID_FOOD")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeteriaDB.CAFETERIA_TABLE", "CAFETERIA_TABLE")
                        .WithMany("FOOD_TABLE")
                        .HasForeignKey("ID_TABLE")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CAFETERIA_TABLE");

                    b.Navigation("FOOD_TYPE");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("api.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("api.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Identity.ApplicationRoleMenu", b =>
                {
                    b.HasOne("api.Identity.ApplicationAPI", "API")
                        .WithMany("RoleMenus")
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Identity.MenuItem", "MenuItem")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Identity.ApplicationRole", "Role")
                        .WithMany("RoleMenus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("API");

                    b.Navigation("MenuItem");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("api.Identity.MenuItem", b =>
                {
                    b.HasOne("api.Identity.MenuItem", "ParentItem")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("ParentItem");
                });

            modelBuilder.Entity("api.Identity.MenuPermission", b =>
                {
                    b.HasOne("api.Identity.Permission", "Permission")
                        .WithMany("MenuPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Identity.ApplicationRoleMenu", "RoleMenu")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("RoleMenu");
                });

            modelBuilder.Entity("CafeteriaDB.ADMIN", b =>
                {
                    b.Navigation("CANVA_ADMIN");
                });

            modelBuilder.Entity("CafeteriaDB.CAFETERIA_TABLE", b =>
                {
                    b.Navigation("FOOD_TABLE");
                });

            modelBuilder.Entity("CafeteriaDB.CANVA", b =>
                {
                    b.Navigation("CANVA_ADMIN");
                });

            modelBuilder.Entity("CafeteriaDB.CANVA_ADMIN", b =>
                {
                    b.Navigation("CAFETERIA_TABLE");
                });

            modelBuilder.Entity("CafeteriaDB.FOOD_TYPE", b =>
                {
                    b.Navigation("FOOD_TABLE");
                });

            modelBuilder.Entity("CafeteriaDB.SHAPE_TYPE", b =>
                {
                    b.Navigation("CAFETERIA_TABLE");
                });

            modelBuilder.Entity("api.Identity.ApplicationAPI", b =>
                {
                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("api.Identity.ApplicationRole", b =>
                {
                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("api.Identity.ApplicationRoleMenu", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("api.Identity.MenuItem", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("api.Identity.Permission", b =>
                {
                    b.Navigation("MenuPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
